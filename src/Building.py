from copy import deepcopy
from Floor import Floor
from Elevator import Elevator
from ElevatorAlgorithm import ElevatorAlgorithm

class Building:
    # (Unchanging) Used to define the physical structure of the building.
    floors = []
    elevators = []
    
    # Brains of the elevator system. Utilizes elevators list to schedule routes to visit floors with pressed "call elevator" buttons.
    elevator_algorithm = None

    # (Changing) Used to keep track of which floors have a "call elevator" button pressed that hasn't been assigned to an elevator yet.
    floors_new_up_button = []
    floors_new_down_button = []

    def __init__(self, floor_populations, building_dest_floors_by_state_name, elevator_starting_floors, elevator_capacity, elevator_algorithm, elevator_steps_per_stop):
        self.floors = deepcopy(self.floors)
        self.elevators = deepcopy(self.elevators) 
        self.floors_new_down_button = deepcopy(self.floors_new_down_button)
        self.floors_new_up_button = deepcopy(self.floors_new_up_button)
        
        self.generate_floors(floor_populations, building_dest_floors_by_state_name)
        self.generate_elevators(elevator_starting_floors, elevator_capacity, elevator_steps_per_stop)
        self.elevator_algorithm = ElevatorAlgorithm(elevator_algorithm)

    """
    Generates a list of Floor classes for the building.

    Takes:
    floor_populations - list of integers representing the number of residents on each floor of a building
    building_dest_floors_by_state_name - Passed to Person classes as generated by Floor classes. See "generate_dest_floors_by_state_name" within the Person class for more documentation.
    
    """
    def generate_floors(self, floor_populations, building_dest_floors_by_state_name):
        for i in range(len(floor_populations)):
            floor = Floor(id=i, num_residents=floor_populations[i], building_dest_floors_by_state_name=building_dest_floors_by_state_name)
            self.floors.append(floor)

    """
    Generates a list of Elevator classes for the building.

    Takes:
    elevator_starting_floors - list of integers representing starting Floor id of each elevator in a Building.
    elevator_capacity - integer representing the maximum amount of Persons that can be onboard an elevator at any given time.
    elevator_algorithm - String representing the algorithm to determine how an elevator decides to move.
    """
    def generate_elevators(self, elevator_starting_floors, elevator_capacity, elevator_steps_per_stop):
        for i in range(len(elevator_starting_floors)):
            self.elevators.append(Elevator(id=i, capacity=elevator_capacity, cur_floor=elevator_starting_floors[i], steps_per_stop=elevator_steps_per_stop))
